#include <iostream>

int main() {

	// 자료형 (크기 단위, byte) Data Type
	// 정수형 : char(1) , short(2), int(4), long(4) , long long(8)
	// 실수형 : float(4), double(8)
	int i = 0;

	
	unsigned char c = 0; // 1byte 로 양수만 표현	0 ~ 255
	signed char c2 = -2; // 1byte 로 음수 양수 표현 -128 ~ -127

	// 비트만 보고 음수 찾는 법 : 2의보수법

	c = 0;
	c = -1;

	int sum = 4 + 4.0;	// 정수형 4와 실수형 4.0의 표현방식이 다른데 어떻게 연산할까?
						// int 이기 때문에 정수형으로 변환 후 연산.

	// 실수의 표현 방식
	// 부동소수점 방식 이기 때문에 미세한 실수일 수록 정확하게 표현하기에는 어려울 수 있다.
	// 정수표현 방식과 실수 표현 방식은 다르다.
	// 실수 표현방식은 정밀도에 의존한다.
	// 따라서 double(8) 자료형이 float(4) 보다 더 아래의 소수점까지 정확하게 표현이 가능하다.

	// 정수는 정수끼리, 실수는 실수끼리 연산하되, 두 표현방식의 피 연산자가 연산될 경우 명시적으로 변환하자.
	float f = 10.2415f + float(20);

	// 정수와 실수의 나눗셈은 다른 동작이 발생한다.

	float result = 10 / 3; // 3
	result = 10 % 3; // 1
	result = float(10.f) / float(3.f); // 3.333333333...., 하지만 int로 받는다면? 소숫점이 짤리고 3이 저장.

	std::cout << result;

	return 0;
}